openapi: 3.0.3
info:
  title: Family Network API
  description: |
    A comprehensive API for managing family networks, person details, relationships, and marriages.
    This API allows you to search for people, manage person records, handle family relationships,
    and maintain marriage records within a family network system.
  version: 1.0.0
  contact:
    name: API Support
    email: support@familynetwork.com
  license:
    name: MIT
    url: https: //opensource.org/licenses/MIT

servers:
  - url: http: //localhost:3000
    description: Development server
  - url: https: //api.familynetwork.com
    description: Production server

tags:
  - name: Search
    description: Search operations for finding people
  - name: Person Management
    description: CRUD operations for person records
  - name: Family Network
    description: Operations for managing family relationships
  - name: Marriages
    description: Operations for managing marriage records

paths:
  /:
    get:
      summary: Health check endpoint
      description: Returns server status
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Network API Server is running"

  /api/search:
    get:
      tags:
        - Search
      summary: Search for people
      description: Search for people by name, location, gender, or birthdate
      parameters:
        - name: name
          in: query
          description: Search by person name or alias (case-insensitive partial match)
          required: false
          schema:
            type: string
            example: "John"
        - name: location
          in: query
          description: Search by current location, birth place, or native place (case-insensitive partial match)
          required: false
          schema:
            type: string
            example: "Mumbai"
        - name: gender
          in: query
          description: Search by gender (case-insensitive partial match)
          required: false
          schema:
            type: string
            example: "Male"
        - name: birthdate
          in: query
          description: Search by exact birth date
          required: false
          schema:
            type: string
            format: date
            example: "1990-01-15"
      responses:
        '200':
          description: List of people matching search criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonRaw'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/details/search:
    get:
      tags:
        - Person Management
      summary: Advanced search for people with relationships
      description: Search for people with full relationship data
      parameters:
        - name: name
          in: query
          description: Search by person name
          required: false
          schema:
            type: string
            example: "John"
        - name: location
          in: query
          description: Search by location
          required: false
          schema:
            type: string
            example: "Mumbai"
      responses:
        '200':
          description: List of people with relationship data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonWithRelationships'
        '400':
          description: Bad request - missing search parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/details/add:
    post:
      tags:
        - Person Management
      summary: Add a new person
      description: Create a new person record with optional family relationships and marriages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonCreateRequest'
      responses:
        '201':
          description: Person created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the newly created person
                    example: 123
                  message:
                    type: string
                    example: "Person added successfully"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/details/{id
}:
    get:
      tags:
        - Person Management
      summary: Get person details with relationships
      description: Retrieve detailed information about a person including their family relationships
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: Person details with relationships
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonWithRelationships'
        '404':
          description: Person not found
          content:
            text/plain:
              schema:
                type: string
                example: "Person not found"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

    put:
      tags:
        - Person Management
      summary: Update person details
      description: Update an existing person's information
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: integer
            example: 123
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonUpdateRequest'
      responses:
        '200':
          description: Person updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonRaw'
        '404':
          description: Person not found
          content:
            text/plain:
              schema:
                type: string
                example: "Person not found"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: "Error updating person"

  /api/details/{id
}/network:
    get:
      tags:
        - Family Network
      summary: Get person's family network
      description: Retrieve all people in the family network of a specific person
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: Family network members
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PersonWithRelationships'
        '404':
          description: Person not found
          content:
            text/plain:
              schema:
                type: string
                example: "Person not found"
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string

  /api/marriages/person/{id
}:
    get:
      tags:
        - Marriages
      summary: Get marriages for a person
      description: Retrieve all marriage records for a specific person
      parameters:
        - name: id
          in: path
          required: true
          description: Person ID
          schema:
            type: integer
            example: 123
      responses:
        '200':
          description: List of marriages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MarriageWithNames'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/marriages:
    post:
      tags:
        - Marriages
      summary: Add a new marriage
      description: Create a new marriage record between two people
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarriageCreateRequest'
      responses:
        '201':
          description: Marriage created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marriage'
        '400':
          description: Bad request - invalid data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: One or both persons not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/marriages/{husbandId
}/{wifeId
}:
    put:
      tags:
        - Marriages
      summary: Update a marriage
      description: Update an existing marriage record
      parameters:
        - name: husbandId
          in: path
          required: true
          description: Husband's ID
          schema:
            type: integer
            example: 123
        - name: wifeId
          in: path
          required: true
          description: Wife's ID
          schema:
            type: integer
            example: 124
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarriageUpdateRequest'
      responses:
        '200':
          description: Marriage updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Marriage'
        '404':
          description: Marriage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Marriages
      summary: Delete a marriage
      description: Remove a marriage record
      parameters:
        - name: husbandId
          in: path
          required: true
          description: Husband's ID
          schema:
            type: integer
            example: 123
        - name: wifeId
          in: path
          required: true
          description: Wife's ID
          schema:
            type: integer
            example: 124
      responses:
        '200':
          description: Marriage deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Marriage deleted successfully"
                  marriage:
                    $ref: '#/components/schemas/Marriage'
        '404':
          description: Marriage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Something went wrong!"
        message:
          type: string
          description: Detailed error message (development mode only)
          example: "Database connection failed"

    PersonRaw:
      type: object
      description: Raw person data from database
      properties:
        id:
          type: integer
          description: Unique person identifier
          example: 123
        personname:
          type: string
          description: Full name of the person
          example: "John Doe"
        birthdate:
          type: string
          format: date
          description: Date of birth
          example: "1990-01-15"
        fatherid:
          type: integer
          nullable: true
          description: Father's ID
          example: 100
        motherid:
          type: integer
          nullable: true
          description: Mother's ID
          example: 101
        spouseid:
          type: integer
          nullable: true
          description: Spouse's ID (legacy field)
          example: 102
        gender:
          type: string
          description: Gender of the person
          example: "Male"
        currentlocation:
          type: string
          nullable: true
          description: Current location
          example: "Mumbai"
        entityname:
          type: string
          nullable: true
          description: Entity name
          example: "John Doe Enterprises"
        placebirth:
          type: string
          nullable: true
          description: Place of birth
          example: "Delhi"
        nativeplace:
          type: string
          nullable: true
          description: Native place
          example: "Punjab"
        locationmatric:
          type: string
          nullable: true
          description: Matriculation location
          example: "Delhi"
        date_birth:
          type: string
          nullable: true
          description: Birth date as string
          example: "15-01-1990"
        worksat:
          type: string
          nullable: true
          description: Workplace
          example: "Tech Corp"
        living:
          type: string
          nullable: true
          description: Living status
          example: "Yes"
        yr_birth:
          type: string
          nullable: true
          description: Birth year
          example: "1990"
        name_alias:
          type: string
          nullable: true
          description: Name alias
          example: "Johnny"
        fb_id:
          type: string
          nullable: true
          description: Facebook ID
          example: "john.doe.123"
        mail_id:
          type: string
          nullable: true
          description: Email address
          example: "john.doe@email.com"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+91-9876543210"
        addedon:
          type: string
          format: date-time
          description: Record creation timestamp
          example: "2023-01-01T10:00:00Z"
        addedby:
          type: string
          nullable: true
          description: User who added the record
          example: "admin"

    PersonWithRelationships:
      type: object
      description: Person data with structured relationships
      properties:
        id:
          type: string
          description: Person ID as string
          example: "123"
        rels:
          type: object
          description: Relationship information
          properties:
            spouses:
              type: array
              items:
                type: string
              description: Array of spouse IDs
              example: [
    "124",
    "125"
]
            children:
              type: array
              items:
                type: string
              description: Array of children IDs
              example: [
    "126",
    "127"
]
            father:
              type: string
              nullable: true
              description: Father's ID
              example: "100"
            mother:
              type: string
              nullable: true
              description: Mother's ID
              example: "101"
        data:
          type: object
          description: Person data
          properties: "first name":
              type: string
              description: First name
              example: "John""last name":
              type: string
              description: Last name
              example: "Doe""birthday":
              type: string
              nullable: true
              description: Birthday
              example: "1990""avatar":
              type: string
              description: Avatar URL
              example: "https://graph.facebook.com/john.doe.123/picture""gender":
              type: string
              description: Gender (first letter, uppercase)
              example: "M""location":
              type: string
              nullable: true
              description: Current location
              example: "Mumbai""contact":
              type: object
              properties: "email":
                  type: string
                  nullable: true
                  example: "john.doe@email.com""phone":
                  type: string
                  nullable: true
                  example: "+91-9876543210""work":
              type: string
              nullable: true
              description: Workplace
              example: "Tech Corp""nativePlace":
              type: string
              nullable: true
              description: Native place
              example: "Punjab""desc":
              type: string
              description: Description combining native place, location, and work
              example: "Punjab Mumbai Tech Corp""label":
              type: string
              description: Full name label
              example: "John Doe"

    PersonCreateRequest:
      type: object
      required:
        - personname
      properties:
        personname:
          type: string
          description: Full name of the person
          example: "John Doe"
        birthdate:
          type: string
          format: date
          nullable: true
          description: Date of birth
          example: "1990-01-15"
        gender:
          type: string
          nullable: true
          description: Gender
          example: "Male"
        currentlocation:
          type: string
          nullable: true
          description: Current location
          example: "Mumbai"
        fatherid:
          type: integer
          nullable: true
          description: Father's ID
          example: 100
        motherid:
          type: integer
          nullable: true
          description: Mother's ID
          example: 101
        spouseids:
          type: array
          items:
            type: integer
          description: Array of spouse IDs
          example: [
    102,
    103
]
        marriageDetails:
          type: array
          items:
            type: object
            properties:
              marriagedate:
                type: string
                format: date
                nullable: true
                example: "2015-02-14"
              marriageyear:
                type: integer
                nullable: true
                example: 2015
              intercaste:
                type: boolean
                default: false
                example: false
          description: Marriage details corresponding to spouse IDs
        worksat:
          type: string
          nullable: true
          description: Workplace
          example: "Tech Corp"
        nativeplace:
          type: string
          nullable: true
          description: Native place
          example: "Punjab"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+91-9876543210"
        mail_id:
          type: string
          nullable: true
          description: Email address
          example: "john.doe@email.com"
        living:
          type: string
          nullable: true
          description: Living status
          example: "Yes"

    PersonUpdateRequest:
      type: object
      description: Fields that can be updated for a person
      properties:
        personname:
          type: string
          nullable: true
          description: Full name of the person
          example: "John Doe"
        birthdate:
          type: string
          format: date
          nullable: true
          description: Date of birth
          example: "1990-01-15"
        gender:
          type: string
          nullable: true
          description: Gender
          example: "M"
        currentlocation:
          type: string
          nullable: true
          description: Current location
          example: "Mumbai"
        fatherid:
          type: integer
          nullable: true
          description: Father's ID
          example: 100
        motherid:
          type: integer
          nullable: true
          description: Mother's ID
          example: 101
        spouseid:
          type: integer
          nullable: true
          description: Spouse ID (legacy field)
          example: 102
        worksat:
          type: string
          nullable: true
          description: Workplace
          example: "Tech Corp"
        nativeplace:
          type: string
          nullable: true
          description: Native place
          example: "Punjab"
        phone:
          type: string
          nullable: true
          description: Phone number
          example: "+91-9876543210"
        mail_id:
          type: string
          nullable: true
          description: Email address
          example: "john.doe@email.com"
        living:
          type: string
          nullable: true
          description: Living status
          example: "Yes"

    Marriage:
      type: object
      description: Marriage record
      properties:
        husbandid:
          type: integer
          description: Husband's ID
          example: 123
        wifeid:
          type: integer
          description: Wife's ID
          example: 124
        marriagedate:
          type: string
          format: date
          nullable: true
          description: Marriage date
          example: "2015-02-14"
        marriageyear:
          type: integer
          nullable: true
          description: Marriage year
          example: 2015
        intercaste:
          type: boolean
          description: Whether it's an intercaste marriage
          example: false
        addedon:
          type: string
          format: date-time
          description: Record creation timestamp
          example: "2023-01-01T10:00:00Z"

    MarriageWithNames:
      allOf:
        - $ref: '#/components/schemas/Marriage'
        - type: object
          properties:
            husband_name:
              type: string
              description: Husband's name
              example: "John Doe"
            wife_name:
              type: string
              description: Wife's name
              example: "Jane Doe"

    MarriageCreateRequest:
      type: object
      required:
        - husbandId
        - wifeId
      properties:
        husbandId:
          type: integer
          description: Husband's ID
          example: 123
        wifeId:
          type: integer
          description: Wife's ID
          example: 124
        marriageDate:
          type: string
          format: date
          nullable: true
          description: Marriage date
          example: "2015-02-14"
        marriageYear:
          type: integer
          nullable: true
          description: Marriage year
          example: 2015
        intercaste:
          type: boolean
          default: false
          description: Whether it's an intercaste marriage
          example: false

    MarriageUpdateRequest:
      type: object
      description: Fields that can be updated for a marriage
      properties:
        marriageDate:
          type: string
          format: date
          nullable: true
          description: Marriage date
          example: "2015-02-14"
        marriageYear:
          type: integer
          nullable: true
          description: Marriage year
          example: 2015
        intercaste:
          type: boolean
          nullable: true
          description: Whether it's an intercaste marriage
          example: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for authentication (if implemented)

security:
  - bearerAuth: []

externalDocs:
  description: Find out more about Family Network API
  url: https: //github.com/your-repo/family-network-api